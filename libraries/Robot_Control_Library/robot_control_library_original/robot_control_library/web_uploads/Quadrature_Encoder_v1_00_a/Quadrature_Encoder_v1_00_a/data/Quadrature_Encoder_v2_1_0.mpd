## Copyright (c) 2004 Xilinx, Inc. All Rights Reserved.
## You may copy and modify these files for your own internal use solely with
## Xilinx programmable logic devices and  Xilinx EDK system or create IP
## modules solely for Xilinx programmable logic devices and Xilinx EDK system.
## No rights are granted to distribute any files unless they are distributed in
## Xilinx programmable logic devices.
###################################################################
##
## Name     : Quadrature_Encoder
## Desc     : Microprocessor Peripheral Description
##          : Automatically generated by PsfUtility
##
###################################################################

BEGIN Quadrature_Encoder

## Peripheral Options
OPTION IPTYPE = PERIPHERAL
OPTION IMP_NETLIST = TRUE
OPTION HDL = VHDL
OPTION IP_GROUP = MICROBLAZE:PPC:USER
OPTION CORE_STATE = DEVELOPMENT


## Bus Interfaces
BUS_INTERFACE BUS = SOPB, BUS_TYPE = SLAVE, BUS_STD = OPB

## Generics for VHDL or Parameters for Verilog
PARAMETER C_BASEADDR = 0xffffffff, DT = std_logic_vector, MIN_SIZE = 0x100, BUS = SOPB, ADDRESS = BASE, PAIR = C_HIGHADDR
PARAMETER C_HIGHADDR = 0x00000000, DT = std_logic_vector, BUS = SOPB, ADDRESS = HIGH, PAIR = C_BASEADDR
PARAMETER C_OPB_AWIDTH = 32, DT = INTEGER, BUS = SOPB
PARAMETER C_OPB_DWIDTH = 32, DT = INTEGER, BUS = SOPB
PARAMETER C_FAMILY = spartan3, DT = STRING
PARAMETER C_QE_INST = 1, DT = INTEGER, MIN_SIZE=1, MAX_SIZE=8, DESC = "Number of Quadrature Encoders instances", PERMIT = BASE_USER
PARAMETER C_QE_CLK_COUNT_WIDTH = 16,  DT = INTEGER, DESC = "Width of the counter that counts clocks between pulses", PERMIT = BASE_USER
PARAMETER C_QE_PULSE_COUNT_WIDTH = 32, DT = INTEGER, DESC = "Width of pulse counter", PERMIT = BASE_USER
PARAMETER C_QE_REV_COUNT_WIDTH = 32, DT = INTEGER, DESC = "Width of revolution counter", PERMIT = BASE_USER
PARAMETER C_QE_NUM_COUNT = 5, DT = INTEGER, DESC = "Number of A pulses to be registered before speed is set to clk tick count", PERMIT = BASE_USER
PARAMETER C_QE_SPEED_WIDTH = 16, DT = INTEGER, DESC = "Width of the speed register", PERMIT BASE_USER
PARAMETER C_QE_ACCELERATION_WIDTH = 16, DT = INTEGER, DESC = "Width of the acceleration register", PERMIT BASE_USER
PARAMETER C_QE_SPEED_TYPE = 0, DT = INTEGER, MIN_SIZE=0, MAX_SIZE=1, DESC = "0: clock ticks between C_QE_NUM_COUNT number of A_CLK's. 1: A_CLK's in timers timeinterval - the interval is when timer has counted from 0 to max which is 2^(C_QE_CLK_COUNT_WIDTH-1) because the timer is signed", PERMIT BASE_USER
##PARAMETER C_QE_OPB_ENABLED = 1, DT =INTEGER, MIN_SIZE=0, MAX_SIZE=1, DESC = "Determine if the pulse, revolution, speed and acceleration registers is accessed through the OPB or externally", PERMIT = BASE_USER

## Ports
PORT ABI_CON = "", DIR = I, VEC = [0:(C_QE_INST*3)-1], DESC = "A, B and I input from quadrature encoder",PERMIT = BASE_USER
PORT TIMER_CLK = "", DIR = I, DESC = "Clock signal for timer used to calculate speed and through speed also acceleration", PERMIT = BASE_USER
PORT PULSE_COUNT_OUT = "", DIR = O, VEC = [(C_QE_INST*C_QE_PULSE_COUNT_WIDTH)-1:0], DESC = "Pulse count output used when not accessed through OPB, toggled by the Generic C_QE_OPB_ENABLED". PERMIT = BASE_USER
PORT REV_COUNT_OUT = "", DIR = O, VEC = [(C_QE_INST*C_QE_REV_COUNT_WIDTH)-1:0], DESC = "Revolution count output used when not accessed through OPB, toggled by the Generic C_QE_OPB_ENABLED". PERMIT = BASE_USER
PORT SPEED_OUT = "", DIR = O, VEC = [(C_QE_INST*C_QE_SPEED_WIDTH)-1:0], DESC = "Speed output used when not accessed through OPB, toggled by the Generic C_QE_OPB_ENABLED". PERMIT = BASE_USER
PORT ACCELERATION_OUT = "", DIR = O, VEC = [(C_QE_INST*C_QE_ACCELERATION_WIDTH)-1:0], DESC = "Acceleration output used when not accessed through OPB, toggled by the Generic C_QE_OPB_ENABLED". PERMIT = BASE_USER
PORT OPB_Clk = "", DIR = I, SIGIS = Clk, BUS = SOPB
PORT OPB_Rst = OPB_Rst, DIR = I, SIGIS = Rst, BUS = SOPB
PORT Sl_DBus = Sl_DBus, DIR = O, VEC = [0:(C_OPB_DWIDTH-1)], BUS = SOPB
PORT Sl_errAck = Sl_errAck, DIR = O, BUS = SOPB
PORT Sl_retry = Sl_retry, DIR = O, BUS = SOPB
PORT Sl_toutSup = Sl_toutSup, DIR = O, BUS = SOPB
PORT Sl_xferAck = Sl_xferAck, DIR = O, BUS = SOPB
PORT OPB_ABus = OPB_ABus, DIR = I, VEC = [0:(C_OPB_AWIDTH-1)], BUS = SOPB
PORT OPB_BE = OPB_BE, DIR = I, VEC = [0:((C_OPB_DWIDTH/8)-1)], BUS = SOPB
PORT OPB_DBus = OPB_DBus, DIR = I, VEC = [0:(C_OPB_DWIDTH-1)], BUS = SOPB
PORT OPB_RNW = OPB_RNW, DIR = I, BUS = SOPB
PORT OPB_select = OPB_select, DIR = I, BUS = SOPB
PORT OPB_seqAddr = OPB_seqAddr, DIR = I, BUS = SOPB
END
